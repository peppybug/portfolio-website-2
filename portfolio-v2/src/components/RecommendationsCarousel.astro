---
// Full self-contained component
const recommendations = [
  {
    quote: `Peppy is a fantastic support agent. She always responds quickly and provides clear, helpful answers. Her dedication to her work is clear in all her interactions. 
    
    Alongside her excellent support skills, she has a keen eye for detail and is always looking for ways to improve processes. Her proactive approach has proven to be a tremendous advantage for our team.
    `,
    name: 'Jan H.',
    title: 'PM Websites & Teamlead, EasySystems',
    companyLogo: '/portfolio/easysystems-logo.png'
  }
];
const recommendationsJSON = JSON.stringify(recommendations);
---
<div class="recommendations-carousel" id="carousel" tabindex="0">
  <blockquote class="recommendation-quote" id="quote"></blockquote>

  <button class="show-more-btn" id="toggleMore" hidden>Show more</button>

  <div class="recommendation-meta">
    <div class="recommendation-person">
      <span class="recommendation-name accent" id="name"></span>
      <div class="recommendation-title-wrapper">
        <span class="recommendation-title" id="title"></span>
        <img id="logo" alt="Company logo" class="company-logo" hidden />
      </div>
    </div>
    <a id="linkedInBtn" href="#" class="linkedin-link" target="_blank" rel="noopener" hidden>
      View on LinkedIn ↗
    </a>
  </div>

  <div class="recommendation-controls">
    <button id="prevBtn" aria-label="Previous recommendation">←</button>
    <div class="recommendation-dots">
      {recommendations.map((_, i) => (
        <button class={`recommendation-dot${i === 0 ? ' active' : ''}`} aria-label={`Show recommendation ${i + 1}`} data-idx={i}></button>
      ))}
    </div>
    <button id="nextBtn" aria-label="Next recommendation">→</button>
  </div>
</div>

<script type="application/json" id="recommendations-data" set:html={recommendationsJSON}></script>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    const recommendations = JSON.parse(document.getElementById("recommendations-data").textContent.trim());
    const isMobile = window.matchMedia("(max-width: 600px)").matches;
    const maxPreviewLength = 300;

    const quoteEl = document.getElementById('quote');
    const nameEl = document.getElementById('name');
    const titleEl = document.getElementById('title');
    const toggleMoreBtn = document.getElementById('toggleMore');
    const linkedInBtn = document.getElementById('linkedInBtn');
    const logoImg = document.getElementById('logo');
    const dots = document.querySelectorAll('.recommendation-dot');
    const carousel = document.getElementById('carousel');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');

    let current = 0;
    let isExpanded = !isMobile;
    let autoSlide;

    function updateQuoteText(quote) {
      const isLong = quote.length > maxPreviewLength;
      toggleMoreBtn.hidden = !isLong || !isMobile;

      if (isExpanded || !isLong) {
        quoteEl.textContent = quote;
        toggleMoreBtn.textContent = 'Show less';
        quoteEl.classList.remove('collapsed');
      } else {
        quoteEl.textContent = quote.slice(0, maxPreviewLength) + '...';
        toggleMoreBtn.textContent = 'Show more';
        quoteEl.classList.add('collapsed');
      }
    }

   function show(index) {
      const rec = recommendations[index];
      if (!rec) return;

      quoteEl.classList.remove('fade');
      quoteEl.classList.add('fade-out');

      setTimeout(() => {
        isExpanded = !isMobile;
        updateQuoteText(rec.quote);
        nameEl.textContent = rec.name;
        titleEl.textContent = rec.title;

        linkedInBtn.hidden = !rec.linkedInURL;
        if (rec.linkedInURL) linkedInBtn.href = rec.linkedInURL;

        logoImg.hidden = !rec.companyLogo;
        if (rec.companyLogo) logoImg.src = rec.companyLogo;

        dots.forEach((d, i) => d.classList.toggle('active', i === index));

        quoteEl.classList.remove('fade-out');
        quoteEl.classList.add('fade');

        current = index;
      }, 250);
    }

    function next() {
      show((current + 1) % recommendations.length);
    }

    function prev() {
      show((current - 1 + recommendations.length) % recommendations.length);
    }

    toggleMoreBtn.addEventListener('click', () => {
      isExpanded = !isExpanded;
      updateQuoteText(recommendations[current].quote);
    });

    dots.forEach((dot, i) => {
      dot.addEventListener('click', () => {
        clearInterval(autoSlide);
        show(i);
        startAutoplay();
      });
    });

    prevBtn.addEventListener('click', () => {
      clearInterval(autoSlide);
      prev();
      startAutoplay();
    });

    nextBtn.addEventListener('click', () => {
      clearInterval(autoSlide);
      next();
      startAutoplay();
    });

    document.addEventListener('keydown', (e) => {
      if (document.activeElement === carousel) {
        if (e.key === 'ArrowRight') {
          next();
          restartAutoplay();
        } else if (e.key === 'ArrowLeft') {
          prev();
          restartAutoplay();
        }
      }
    });

    function addPauseListeners() {
      carousel.addEventListener('mouseenter', stopAutoplay);
      carousel.addEventListener('mouseleave', startAutoplay);
      carousel.addEventListener('focusin', stopAutoplay);
      carousel.addEventListener('focusout', startAutoplay);
    }

    function stopAutoplay() {
      clearInterval(autoSlide);
    }

    function startAutoplay() {
      stopAutoplay();
      autoSlide = setInterval(next, 8000);
    }

    function restartAutoplay() {
      stopAutoplay();
      startAutoplay();
    }

    addPauseListeners();
    show(current);
    startAutoplay();
  });
</script>